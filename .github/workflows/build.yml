name: Release Obsidian plugin

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.18.51)'
        required: true
        type: string
  push:
    tags:
      - "*"

env:
  PLUGIN_NAME: obsidian-better-command-palette

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Set version variables
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "TAG_NAME=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "TAG_NAME=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Update version files
        if: github.event_name == 'workflow_dispatch'
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version in package.json is $CURRENT_VERSION"
          echo "Requested version is ${{ steps.version.outputs.VERSION }}"

          if [ "$CURRENT_VERSION" != "${{ steps.version.outputs.VERSION }}" ]; then
            echo "Updating package.json version…"
            npm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version
          else
            echo "package.json already at requested version; skipping npm version"
          fi
          
          # Update manifest.json version if it differs
          if [ -f manifest.json ]; then
            MANIFEST_VERSION=$(jq -r '.version' manifest.json)
            if [ "$MANIFEST_VERSION" != "${{ steps.version.outputs.VERSION }}" ]; then
              echo "Updating manifest.json version…"
              jq --arg ver "${{ steps.version.outputs.VERSION }}" '.version=$ver' manifest.json > manifest.json.tmp && mv manifest.json.tmp manifest.json
            else
              echo "manifest.json already at requested version; skipping"
            fi
          fi
          
          # Update versions.json (append mapping only if absent)
          if [ -f versions.json ]; then
            if [ -f version-bump.mjs ]; then
              node version-bump.mjs ${{ steps.version.outputs.VERSION }}
            else
              if ! jq -e --arg ver "${{ steps.version.outputs.VERSION }}" 'has($ver)' versions.json >/dev/null; then
                echo "Adding version to versions.json"
                jq --arg ver "${{ steps.version.outputs.VERSION }}" '. + {($ver): "0.12.0"}' versions.json > versions.json.tmp && mv versions.json.tmp versions.json
              else
                echo "versions.json already contains requested version; skipping"
              fi
            fi
          fi

      - name: Create and push tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git add .
          git commit -m "Version bump to ${{ steps.version.outputs.VERSION }}" || echo "No changes to commit"
          git tag ${{ steps.version.outputs.TAG_NAME }}
          git push origin HEAD:${{ github.ref_name }}
          git push origin ${{ steps.version.outputs.TAG_NAME }}

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "16.x"
          cache: 'npm'

      - name: Check Node.js and npm versions
        run: |
          node --version
          npm --version
        continue-on-error: false

      - name: Install dependencies
        run: npm ci
        continue-on-error: false

      - name: Lint code
        run: |
          if node -e "const p=require('./package.json');process.exit(p.scripts && p.scripts.lint ? 0 : 1)"; then npm run lint; else echo "No lint script"; fi
        continue-on-error: false

      - name: Run tests
        run: |
          if [ -f package.json ] && npm test -- --ci; then echo "Tests passed"; else echo "No tests or tests failed"; fi
        continue-on-error: false

      - name: Build
        run: |
          npm run build
          mkdir -p ${{ env.PLUGIN_NAME }}
          cp dist/main.js dist/manifest.json dist/styles.css ${{ env.PLUGIN_NAME }}
          zip -r ${{ env.PLUGIN_NAME }}.zip ${{ env.PLUGIN_NAME }}
        continue-on-error: false

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PLUGIN_NAME }}-build-${{ steps.version.outputs.VERSION }}
          path: |
            ${{ env.PLUGIN_NAME }}.zip
            dist/main.js
            dist/manifest.json
            dist/styles.css

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: success()
        with:
          tag_name: ${{ steps.version.outputs.TAG_NAME }}
          name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            ${{ env.PLUGIN_NAME }}.zip
            dist/main.js
            dist/manifest.json
            dist/styles.css
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}